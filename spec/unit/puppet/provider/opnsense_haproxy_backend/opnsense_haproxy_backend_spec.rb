# frozen_string_literal: true

require 'spec_helper'

ensure_module_defined('Puppet::Provider::OpnsenseHaproxyBackend')
require 'puppet/provider/opnsense_haproxy_backend/opnsense_haproxy_backend'

RSpec.describe Puppet::Provider::OpnsenseHaproxyBackend::OpnsenseHaproxyBackend do
  subject(:provider) { described_class.new }

  let(:context) { instance_double('Puppet::ResourceApi::BaseContext', 'context') }
  let(:devices) { ['opnsense1.example.com', 'opnsense2.example.com'] }
  let(:backends_device_1) do
    [
      {
        "id": '6142ea7a0f7ae3.01265552',
          "enabled": '1',
          "name": 'pool4',
          "description": '',
          "mode": 'http',
          "algorithm": 'source',
          "random_draws": '2',
          "proxyProtocol": '',
          "linkedServers": '5af38a37-33a5-42d2-97f9-c82bd9c661dc',
          "linkedResolver": '',
          "resolverOpts": '',
          "resolvePrefer": '',
          "source": '',
          "healthCheckEnabled": '1',
          "healthCheck": '82b03c40-6872-4d06-8510-4cffb87c375b',
          "healthCheckLogStatus": '1',
          "checkInterval": '',
          "checkDownInterval": '',
          "healthCheckFall": '',
          "healthCheckRise": '',
          "linkedMailer": '',
          "http2Enabled": '1',
          "http2Enabled_nontls": '1',
          "ba_advertised_protocols": '',
          "persistence": 'sticktable',
          "persistence_cookiemode": 'piggyback',
          "persistence_cookiename": 'SRVCOOKIE',
          "persistence_stripquotes": '1',
          "stickiness_pattern": 'sourceipv4',
          "stickiness_dataTypes": 'bytes_in_cnt,bytes_out_cnt',
          "stickiness_expire": '30m',
          "stickiness_size": '50k',
          "stickiness_cookiename": '',
          "stickiness_cookielength": '',
          "stickiness_connRatePeriod": '10s',
          "stickiness_sessRatePeriod": '10s',
          "stickiness_httpReqRatePeriod": '10s',
          "stickiness_httpErrRatePeriod": '10s',
          "stickiness_bytesInRatePeriod": '1m',
          "stickiness_bytesOutRatePeriod": '1m',
          "basicAuthEnabled": '1',
          "basicAuthUsers": '',
          "basicAuthGroups": '',
          "tuning_timeoutConnect": '',
          "tuning_timeoutCheck": '',
          "tuning_timeoutServer": '',
          "tuning_retries": '',
          "customOptions": '',
          "tuning_defaultserver": '',
          "tuning_noport": '1',
          "tuning_httpreuse": 'safe',
          "tuning_caching": '1',
          "linkedActions": [],
          "linkedErrorfiles": [],
          "uuid": '9b3ecb61-6d20-4747-b969-c2edace33a9c',
          "Servers": 'server1',
          "Resolver": '',
          "Healthcheck": 'http_80',
          "Mailer": '',
          "Users": '',
          "Groups": '',
          "Actions": '',
          "Errorfiles": ''
      },
      {
        "id": '6142ed320da411.02713717',
          "enabled": '1',
          "name": 'pool5',
          "description": '',
          "mode": 'http',
          "algorithm": 'source',
          "random_draws": '2',
          "proxyProtocol": '',
          "linkedServers": [],
          "linkedResolver": '',
          "resolverOpts": 'ignore-weight,prevent-dup-ip',
          "resolvePrefer": '',
          "source": '',
          "healthCheckEnabled": '1',
          "healthCheck": '',
          "healthCheckLogStatus": '1',
          "checkInterval": '',
          "checkDownInterval": '',
          "healthCheckFall": '',
          "healthCheckRise": '',
          "linkedMailer": '',
          "http2Enabled": '1',
          "http2Enabled_nontls": '1',
          "ba_advertised_protocols": '',
          "persistence": 'sticktable',
          "persistence_cookiemode": 'piggyback',
          "persistence_cookiename": 'SRVCOOKIE',
          "persistence_stripquotes": '1',
          "stickiness_pattern": 'sourceipv4',
          "stickiness_dataTypes": '',
          "stickiness_expire": '30m',
          "stickiness_size": '50k',
          "stickiness_cookiename": '',
          "stickiness_cookielength": '',
          "stickiness_connRatePeriod": '10s',
          "stickiness_sessRatePeriod": '10s',
          "stickiness_httpReqRatePeriod": '10s',
          "stickiness_httpErrRatePeriod": '10s',
          "stickiness_bytesInRatePeriod": '1m',
          "stickiness_bytesOutRatePeriod": '1m',
          "basicAuthEnabled": '1',
          "basicAuthUsers": '',
          "basicAuthGroups": [],
          "tuning_timeoutConnect": '',
          "tuning_timeoutCheck": '',
          "tuning_timeoutServer": '',
          "tuning_retries": '',
          "customOptions": '',
          "tuning_defaultserver": '',
          "tuning_noport": '1',
          "tuning_httpreuse": 'safe',
          "tuning_caching": '1',
          "linkedActions": [],
          "linkedErrorfiles": [],
          "uuid": '8ffb5120-4ac6-4a1b-a2cb-5c9aaeaa40f3',
          "Servers": '',
          "Resolver": '',
          "Healthcheck": '',
          "Mailer": '',
          "Users": '',
          "Groups": '',
          "Actions": '',
          "Errorfiles": ''
      },
    ]
  end
  let(:backends_device_2) do
    [
      {
        "id": '6142ed9181bc82.06337290',
          "enabled": '1',
          "name": 'pool6',
          "description": '',
          "mode": 'http',
          "algorithm": 'source',
          "random_draws": '2',
          "proxyProtocol": '',
          "linkedServers": [],
          "linkedResolver": '',
          "resolverOpts": '',
          "resolvePrefer": '',
          "source": '',
          "healthCheckEnabled": '1',
          "healthCheck": '',
          "healthCheckLogStatus": '1',
          "checkInterval": '',
          "checkDownInterval": '',
          "healthCheckFall": '',
          "healthCheckRise": '',
          "linkedMailer": '',
          "http2Enabled": '1',
          "http2Enabled_nontls": '1',
          "ba_advertised_protocols": 'h2,http11',
          "persistence": 'sticktable',
          "persistence_cookiemode": 'piggyback',
          "persistence_cookiename": 'SRVCOOKIE',
          "persistence_stripquotes": '1',
          "stickiness_pattern": 'sourceipv4',
          "stickiness_dataTypes": '',
          "stickiness_expire": '30m',
          "stickiness_size": '50k',
          "stickiness_cookiename": '',
          "stickiness_cookielength": '',
          "stickiness_connRatePeriod": '10s',
          "stickiness_sessRatePeriod": '10s',
          "stickiness_httpReqRatePeriod": '10s',
          "stickiness_httpErrRatePeriod": '10s',
          "stickiness_bytesInRatePeriod": '1m',
          "stickiness_bytesOutRatePeriod": '1m',
          "basicAuthEnabled": '1',
          "basicAuthUsers": '779fd0ad-e069-452c-8854-7afe30c5f289',
          "basicAuthGroups": [],
          "tuning_timeoutConnect": '',
          "tuning_timeoutCheck": '',
          "tuning_timeoutServer": '',
          "tuning_retries": '',
          "customOptions": '',
          "tuning_defaultserver": '',
          "tuning_noport": '1',
          "tuning_httpreuse": 'safe',
          "tuning_caching": '1',
          "linkedActions": [],
          "linkedErrorfiles": [],
          "uuid": '73dd4120-6993-4249-8dec-034195ef832d',
          "Servers": '',
          "Resolver": '',
          "Healthcheck": '',
          "Mailer": '',
          "Users": '',
          "Groups": '',
          "Actions": '',
          "Errorfiles": ''
      },
    ]
  end

  describe '#get' do
    it 'processes resources' do
      expect(Dir).to receive(:glob).and_return(devices)
      expect(Puppet::Util::Execution).to receive(:execute).with(
          [
            'opn-cli', '-c', File.expand_path('~/.puppet-opnsense/opnsense1.example.com-config.yaml'),
            ['haproxy', 'backend', 'list', '-o', 'json']
          ],
          { custom_environment: { 'LC_ALL' => 'en_US.utf8' }, failonfail: true, combine: true },
        ).and_return(backends_device_1.to_json)
      expect(Puppet::Util::Execution).to receive(:execute).with(
          [
            'opn-cli', '-c', File.expand_path('~/.puppet-opnsense/opnsense2.example.com-config.yaml'),
            ['haproxy', 'backend', 'list', '-o', 'json']
          ],
          { custom_environment: { 'LC_ALL' => 'en_US.utf8' }, failonfail: true, combine: true },
        ).and_return(backends_device_2.to_json)

      expect(provider.get(context, [])).to eq [
        {
          title: 'pool4@opnsense1.example.com',
            name: 'pool4',
            device: 'opnsense1.example.com',
            enabled: true,
            description: '',
            mode: 'http',
            algorithm: 'source',
            random_draws: '2',
            proxy_protocol: '',
            linked_servers: ['5af38a37-33a5-42d2-97f9-c82bd9c661dc'],
            linked_resolver: '',
            resolver_opts: [],
            resolve_prefer: '',
            source: '',
            health_check_enabled: true,
            health_check: '82b03c40-6872-4d06-8510-4cffb87c375b',
            health_check_log_status: true,
            check_interval: '',
            check_down_interval: '',
            health_check_fall: '',
            health_check_rise: '',
            linked_mailer: '',
            http2_enabled: true,
            http2_enabled_nontls: true,
            ba_advertised_protocols: [],
            persistence: 'sticktable',
            persistence_cookiemode: 'piggyback',
            persistence_cookiename: 'SRVCOOKIE',
            persistence_stripquotes: true,
            stickiness_pattern: 'sourceipv4',
            stickiness_data_types: ['bytes_in_cnt', 'bytes_out_cnt'],
            stickiness_expire: '30m',
            stickiness_size: '50k',
            stickiness_cookiename: '',
            stickiness_cookielength: '',
            stickiness_conn_rate_period: '10s',
            stickiness_sess_rate_period: '10s',
            stickiness_http_req_rate_period: '10s',
            stickiness_http_err_rate_period: '10s',
            stickiness_bytes_in_rate_period: '1m',
            stickiness_bytes_out_rate_period: '1m',
            basic_auth_enabled: true,
            basic_auth_users: [],
            basic_auth_groups: [],
            tuning_timeout_connect: '',
            tuning_timeout_check: '',
            tuning_timeout_server: '',
            tuning_retries: '',
            custom_options: '',
            tuning_defaultserver: '',
            tuning_noport: true,
            tuning_httpreuse: 'safe',
            tuning_caching: true,
            linked_actions: [],
            linked_errorfiles: [],
            ensure: 'present'
        },
        {
          title: 'pool5@opnsense1.example.com',
            name: 'pool5',
            device: 'opnsense1.example.com',
            enabled: true,
            description: '',
            mode: 'http',
            algorithm: 'source',
            random_draws: '2',
            proxy_protocol: '',
            linked_servers: [],
            linked_resolver: '',
            resolver_opts: ['ignore-weight', 'prevent-dup-ip'],
            resolve_prefer: '',
            source: '',
            health_check_enabled: true,
            health_check: '',
            health_check_log_status: true,
            check_interval: '',
            check_down_interval: '',
            health_check_fall: '',
            health_check_rise: '',
            linked_mailer: '',
            http2_enabled: true,
            http2_enabled_nontls: true,
            ba_advertised_protocols: [],
            persistence: 'sticktable',
            persistence_cookiemode: 'piggyback',
            persistence_cookiename: 'SRVCOOKIE',
            persistence_stripquotes: true,
            stickiness_pattern: 'sourceipv4',
            stickiness_data_types: [],
            stickiness_expire: '30m',
            stickiness_size: '50k',
            stickiness_cookiename: '',
            stickiness_cookielength: '',
            stickiness_conn_rate_period: '10s',
            stickiness_sess_rate_period: '10s',
            stickiness_http_req_rate_period: '10s',
            stickiness_http_err_rate_period: '10s',
            stickiness_bytes_in_rate_period: '1m',
            stickiness_bytes_out_rate_period: '1m',
            basic_auth_enabled: true,
            basic_auth_users: [],
            basic_auth_groups: [],
            tuning_timeout_connect: '',
            tuning_timeout_check: '',
            tuning_timeout_server: '',
            tuning_retries: '',
            custom_options: '',
            tuning_defaultserver: '',
            tuning_noport: true,
            tuning_httpreuse: 'safe',
            tuning_caching: true,
            linked_actions: [],
            linked_errorfiles: [],
            ensure: 'present'
        },
        {
          title: 'pool6@opnsense2.example.com',
            name: 'pool6',
            device: 'opnsense2.example.com',
            enabled: true,
            description: '',
            mode: 'http',
            algorithm: 'source',
            random_draws: '2',
            proxy_protocol: '',
            linked_servers: [],
            linked_resolver: '',
            resolver_opts: [],
            resolve_prefer: '',
            source: '',
            health_check_enabled: true,
            health_check: '',
            health_check_log_status: true,
            check_interval: '',
            check_down_interval: '',
            health_check_fall: '',
            health_check_rise: '',
            linked_mailer: '',
            http2_enabled: true,
            http2_enabled_nontls: true,
            ba_advertised_protocols: ['h2', 'http11'],
            persistence: 'sticktable',
            persistence_cookiemode: 'piggyback',
            persistence_cookiename: 'SRVCOOKIE',
            persistence_stripquotes: true,
            stickiness_pattern: 'sourceipv4',
            stickiness_data_types: [],
            stickiness_expire: '30m',
            stickiness_size: '50k',
            stickiness_cookiename: '',
            stickiness_cookielength: '',
            stickiness_conn_rate_period: '10s',
            stickiness_sess_rate_period: '10s',
            stickiness_http_req_rate_period: '10s',
            stickiness_http_err_rate_period: '10s',
            stickiness_bytes_in_rate_period: '1m',
            stickiness_bytes_out_rate_period: '1m',
            basic_auth_enabled: true,
            basic_auth_users: ['779fd0ad-e069-452c-8854-7afe30c5f289'],
            basic_auth_groups: [],
            tuning_timeout_connect: '',
            tuning_timeout_check: '',
            tuning_timeout_server: '',
            tuning_retries: '',
            custom_options: '',
            tuning_defaultserver: '',
            tuning_noport: true,
            tuning_httpreuse: 'safe',
            tuning_caching: true,
            linked_actions: [],
            linked_errorfiles: [],
            ensure: 'present'
        },
      ]
    end
  end

  describe 'create(context, name, should)' do
    it 'creates the resource' do
      expect(Puppet::Util::Execution).to receive(:execute)
        .and_return('{"result": "saved", "uuid": "1a2d6a8e-ed7a-4377-b723-e1582b2b2c18"}')

      provider.create(context, 'webserver_pool@opnsense2.example.com',
                      enabled: true,
                      description: 'backend for webserver',
                      mode: 'http',
                      algorithm: 'source',
                      random_draws: '2',
                      proxy_protocol: '',
                      linked_servers: [],
                      linked_resolver: '',
                      resolver_opts: [],
                      resolve_prefer: '',
                      source: '',
                      health_check_enabled: true,
                      health_check: '',
                      health_check_log_status: true,
                      check_interval: '',
                      check_down_interval: '',
                      health_check_fall: '',
                      health_check_rise: '',
                      linked_mailer: '',
                      http2_enabled: true,
                      http2_enabled_nontls: true,
                      ba_advertised_protocols: ['h2', 'http11'],
                      persistence: 'sticktable',
                      persistence_cookiemode: 'piggyback',
                      persistence_cookiename: 'SRVCOOKIE',
                      persistence_stripquotes: true,
                      stickiness_pattern: 'sourceipv4',
                      stickiness_data_types: [],
                      stickiness_expire: '30m',
                      stickiness_size: '50k',
                      stickiness_cookiename: '',
                      stickiness_cookielength: '',
                      stickiness_conn_rate_period: '10s',
                      stickiness_sess_rate_period: '10s',
                      stickiness_http_req_rate_period: '10s',
                      stickiness_http_err_rate_period: '10s',
                      stickiness_bytes_in_rate_period: '1m',
                      stickiness_bytes_out_rate_period: '1m',
                      basic_auth_enabled: true,
                      basic_auth_users: [],
                      basic_auth_groups: [],
                      tuning_timeout_connect: '',
                      tuning_timeout_check: '',
                      tuning_timeout_server: '',
                      tuning_retries: '',
                      custom_options: '',
                      tuning_defaultserver: '',
                      tuning_noport: true,
                      tuning_httpreuse: 'safe',
                      tuning_caching: true,
                      linked_actions: [],
                      linked_errorfiles: [],
                      ensure: 'present')
    end
  end

  describe 'update(context, name, should)' do
    it 'updates the resource' do
      expect(Puppet::Util::Execution).to receive(:execute).and_return('{"result": "deleted"}')
      backends_device_2[0][:device] = 'opnsense2.example.com'
      provider.resource_list = backends_device_2

      provider.update(context, { name: 'webserver_pool', device: 'opnsense2.example.com' },
                      enabled: true,
                      description: 'backend for webserver modified',
                      mode: 'tcp',
                      algorithm: 'roundrobin',
                      random_draws: '3',
                      proxy_protocol: 'v1',
                      linked_servers: ['5f29ba6e-7bea-4530-b2fd-d3f843e0ef2f'],
                      linked_resolver: '1bb178dc-f8a2-41ab-a054-ebfc6b577cb3',
                      resolver_opts: ['allow-dup-ip'],
                      resolve_prefer: 'ipv4',
                      source: '10.0.0.2',
                      health_check_enabled: false,
                      health_check: '2de2e820-adee-40ea-b6ee-c6babe730133',
                      health_check_log_status: false,
                      check_interval: '100',
                      check_down_interval: '100',
                      health_check_fall: '2',
                      health_check_rise: '2',
                      linked_mailer: 'baaeabff-08c9-4131-932a-b9b157a432cd',
                      http2_enabled: false,
                      http2_enabled_nontls: false,
                      ba_advertised_protocols: ['http11'],
                      persistence: 'cookie',
                      persistence_cookiemode: 'new',
                      persistence_cookiename: 'COOKIE',
                      persistence_stripquotes: false,
                      stickiness_pattern: 'sourceipv6',
                      stickiness_data_types: ['conn_cnt'],
                      stickiness_expire: '20m',
                      stickiness_size: '50k',
                      stickiness_cookiename: 'cookie2',
                      stickiness_cookielength: '20',
                      stickiness_conn_rate_period: '15s',
                      stickiness_sess_rate_period: '15s',
                      stickiness_http_req_rate_period: '15s',
                      stickiness_http_err_rate_period: '15s',
                      stickiness_bytes_in_rate_period: '2m',
                      stickiness_bytes_out_rate_period: '2m',
                      basic_auth_enabled: false,
                      basic_auth_users: ['f12d0e44-975d-4f30-a3ee-dca4f0079c77'],
                      basic_auth_groups: ['39cd97c9-c734-46c8-955e-d227b03985b0'],
                      tuning_timeout_connect: '20s',
                      tuning_timeout_check: '20s',
                      tuning_timeout_server: '20s',
                      tuning_retries: '2',
                      custom_options: 'http-reuse safe',
                      tuning_defaultserver: 'port 21',
                      tuning_noport: false,
                      tuning_httpreuse: 'never',
                      tuning_caching: false,
                      linked_actions: ['0e4748b9-d435-4c95-9f1d-3f76650e2a29', '49cd97c9-c734-46c8-955e-d227b03985b1'],
                      linked_errorfiles: ['1e63c41e-fa87-44bd-96cf-c10303c795af'],
                      ensure: 'present')
    end
  end

  describe 'delete(context, name)' do
    it 'deletes the resource' do
      expect(Puppet::Util::Execution).to receive(:execute).and_return('{"result": "deleted"}')
      backends_device_2[0][:device] = 'opnsense2.example.com'
      provider.resource_list = backends_device_2

      provider.delete(context, { name: 'webserver_pool', device: 'opnsense2.example.com' })
    end
  end
end
