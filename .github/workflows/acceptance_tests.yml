name: "Acceptance Tests"

on:
  push:
    branches:
      - main
  pull_request:
    branches: [ main ]

jobs:

  Acceptance:
    name: "OPNsense 21.7.4, CentOS-8, puppet7"
    runs-on: macos-latest
    strategy:
      fail-fast: false

    steps:
      - name: Install docker
        run: |
          brew cask install docker
          # allow the app to run without confirmation
          xattr -d -r com.apple.quarantine /Applications/Docker.app

          # preemptively do docker.app's setup to avoid any gui prompts
          sudo /bin/cp /Applications/Docker.app/Contents/Library/LaunchServices/com.docker.vmnetd /Library/PrivilegedHelperTools
          sudo /bin/cp /Applications/Docker.app/Contents/Resources/com.docker.vmnetd.plist /Library/LaunchDaemons/
          sudo /bin/chmod 544 /Library/PrivilegedHelperTools/com.docker.vmnetd
          sudo /bin/chmod 644 /Library/LaunchDaemons/com.docker.vmnetd.plist
          sudo /bin/launchctl load /Library/LaunchDaemons/com.docker.vmnetd.plist
          open -g -a Docker.app

          # Wait for the server to start up, if applicable.
          i=0
          while ! docker system info &>/dev/null; do
          (( i++ == 0 )) && printf %s '-- Waiting for Docker to finish starting up...' || printf '.'
          sleep 1
          done
          (( i )) && printf '\n'

          echo "-- Docker is ready."

      - name: Checkout Source
        uses: actions/checkout@v2

      - name: Activate ruby and install libaries
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "2.7"
          bundler-cache: true

      - name: Cache Vagrant boxes
        uses: actions/cache@v2
        with:
          path: ~/.vagrant.d/boxes
          key: ${{ runner.os }}-vagrant-${{ hashFiles('Vagrantfile') }}
          restore-keys: |
            ${{ runner.os }}-vagrant-

      - name: Show Vagrant version
        run: vagrant --version

      - name: Run vagrant up
        run: vagrant up

      - name: show ip config for host
        run: |
          ifconfig

      - name: Get NAT IP for vagrant box
        run: |
          echo "MY_IP=$( ifconfig | grep "inet " | grep -v 127.0.0.1 | cut -d\  -f2|head -n1)" >> $GITHUB_ENV

      - name: Deploy opn-cli config
        run: |
          cp spec/fixtures/acceptance/opn-cli/conf.yaml.dist spec/fixtures/acceptance/opn-cli/conf.yaml
          sed -i '' "s/host.docker.internal/${{ env.MY_IP }}/g" spec/fixtures/acceptance/opn-cli/conf.yaml
          cp spec/fixtures/acceptance/opn-cli/ca.pem.dist spec/fixtures/acceptance/opn-cli/ca.pem
          echo ::group::=== OPN-CLI CONFIG ===
          cat spec/fixtures/acceptance/opn-cli/conf.yaml
          echo ::group::=== OPN-CLI CERT ===
          cat spec/fixtures/acceptance/opn-cli/ca.pem

      - name: Provision litmus docker container
        run: |
          eval $(docker-machine env default)
          bundle exec rake 'litmus:provision_list[acceptance]'
          sed -i '' '
          /shell-command: bash -lc/a\
          \ \ \ \ \ \ \ \ tmpdir: "\/\"
          ' spec/fixtures/litmus_inventory.yaml
          echo ::group::=== INVENTORY ===
          if [ -f 'spec/fixtures/litmus_inventory.yaml' ];
          then
            FILE='spec/fixtures/litmus_inventory.yaml'
          elif [ -f 'inventory.yaml' ];
          then
            FILE='inventory.yaml'
          fi
          cat $FILE
          #sed -e 's/password: .*/password: "[redacted]"/' < $FILE || true
          echo ::endgroup::

      - name: Install puppet agent 7
        run: |
          eval $(docker-machine env default)
          bundle exec rake 'litmus:install_agent[puppet7]'

      - name: Install puppet module
        run: |
          eval $(docker-machine env default)
          bundle exec rake 'litmus:install_module'

      - name: Run acceptance tests
        run: |
          eval $(docker-machine env default)
          bundle exec rake 'litmus:acceptance:parallel'

      - name: Remove test environment
        if: ${{ always() }}
        continue-on-error: true
        run: |
          if [[ -f inventory.yaml || -f spec/fixtures/litmus_inventory.yaml ]]; then
            eval $(docker-machine env default)
            bundle exec rake 'litmus:tear_down'
          fi
          vagrant destroy -f
